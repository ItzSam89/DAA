#include <iostream>
#include <vector>

using namespace std;

// Function to find the maximum value of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Dynamic programming function to solve the 0/1 knapsack problem
int knapSack(int W, vector<int> wt, vector<int> val, int n) {
    // Create a table to store the results of subproblems
    int K[n + 1][W + 1];

    // Build the table in bottom-up fashion
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0)
                K[i][w] = 0;
            else if (wt[i - 1] <= w)
                K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w]);
            else
                K[i][w] = K[i - 1][w];
        }
    }

    // Return the result stored in the table
    return K[n][W];
}

int main() {
    int val[] = {60, 100, 120};
    int wt[] = {10, 20, 30};
    int W = 50;
    int n = sizeof(val) / sizeof(val[0]);

    cout << "Maximum value that can be put in a knapsack of capacity " << W << " is "
         << knapSack(W, wt, val, n
